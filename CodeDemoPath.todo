#+STARTUP: indent
#+STARTUP: hidestars

* Code Demo Points
** MEAppDelegate
*** Single line, the call to MEDataManager to initialize the data manager singleton, set up the core data stack, gloss over the setupCategories method (creates the categories for the demo)
** MEDataManager
*** sharedManager
*** init method
**** go into detail about each of the calls to create the core data stack
*** mainQueueManagedObjectContext
**** concurrency type
**** setting the parent to the persistent store coordinator created in -init
*** saveMainContextError: deleteMainContextError:
**** illustrates performBlockAndWait: and performBlock: methods when using parent queues
*** fetchAllInstancesOf:sortDescriptors:filteredBy:inContext:
**** method for fetching, sorting, and filtering data
**** mention how the context is always passed in and why - threads!
** Model Subclasses
*** look over each of the subclasses in order of Category, ToDoList, and ToDoItem and discuss the relevent methods in each one
** METoDoListViewController
*** viewWillAppear:
**** we load in our categories, first by fetching our categories and faulting in their related ToDoLists
**** performing a separate fetch request to get the uncategories lists
*** editViewController:didSaveObject:
**** discuss our protocol for handling saves between view controllers.
**** brief segue into the MEEditViewController protocol
** METoDoItemViewController
*** tableView:cellForRowAtIndexPath:
**** extract the todo item from the "items" relationship set
**** we sort them each time, small data set, NSSets are not ordered, etc...
**** you can potentially get a different object in across method calls
** METoDoListEditViewController
*** init
**** fetching the list by the passed in NSManagedObjectID using the passed in context, to confine edits to this context only.
** METoDoItemEditViewController
**** variation on the theme set in METoDoListEditViewController

